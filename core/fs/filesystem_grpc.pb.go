// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: protos/filesystem.proto

package fs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Filesystem_ListFiles_FullMethodName    = "/fs.Filesystem/ListFiles"
	Filesystem_LinkFolder_FullMethodName   = "/fs.Filesystem/LinkFolder"
	Filesystem_CreateFolder_FullMethodName = "/fs.Filesystem/CreateFolder"
)

// FilesystemClient is the client API for Filesystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesystemClient interface {
	ListFiles(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Folder, error)
	LinkFolder(ctx context.Context, in *InputFolders, opts ...grpc.CallOption) (*LinkResult, error)
	CreateFolder(ctx context.Context, in *NewPath, opts ...grpc.CallOption) (*LinkResult, error)
}

type filesystemClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesystemClient(cc grpc.ClientConnInterface) FilesystemClient {
	return &filesystemClient{cc}
}

func (c *filesystemClient) ListFiles(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Folder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Folder)
	err := c.cc.Invoke(ctx, Filesystem_ListFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) LinkFolder(ctx context.Context, in *InputFolders, opts ...grpc.CallOption) (*LinkResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkResult)
	err := c.cc.Invoke(ctx, Filesystem_LinkFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) CreateFolder(ctx context.Context, in *NewPath, opts ...grpc.CallOption) (*LinkResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkResult)
	err := c.cc.Invoke(ctx, Filesystem_CreateFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesystemServer is the server API for Filesystem service.
// All implementations must embed UnimplementedFilesystemServer
// for forward compatibility.
type FilesystemServer interface {
	ListFiles(context.Context, *Path) (*Folder, error)
	LinkFolder(context.Context, *InputFolders) (*LinkResult, error)
	CreateFolder(context.Context, *NewPath) (*LinkResult, error)
	mustEmbedUnimplementedFilesystemServer()
}

// UnimplementedFilesystemServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFilesystemServer struct{}

func (UnimplementedFilesystemServer) ListFiles(context.Context, *Path) (*Folder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedFilesystemServer) LinkFolder(context.Context, *InputFolders) (*LinkResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkFolder not implemented")
}
func (UnimplementedFilesystemServer) CreateFolder(context.Context, *NewPath) (*LinkResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedFilesystemServer) mustEmbedUnimplementedFilesystemServer() {}
func (UnimplementedFilesystemServer) testEmbeddedByValue()                    {}

// UnsafeFilesystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesystemServer will
// result in compilation errors.
type UnsafeFilesystemServer interface {
	mustEmbedUnimplementedFilesystemServer()
}

func RegisterFilesystemServer(s grpc.ServiceRegistrar, srv FilesystemServer) {
	// If the following call pancis, it indicates UnimplementedFilesystemServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Filesystem_ServiceDesc, srv)
}

func _Filesystem_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filesystem_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).ListFiles(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_LinkFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputFolders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).LinkFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filesystem_LinkFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).LinkFolder(ctx, req.(*InputFolders))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filesystem_CreateFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).CreateFolder(ctx, req.(*NewPath))
	}
	return interceptor(ctx, in, info, handler)
}

// Filesystem_ServiceDesc is the grpc.ServiceDesc for Filesystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Filesystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fs.Filesystem",
	HandlerType: (*FilesystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFiles",
			Handler:    _Filesystem_ListFiles_Handler,
		},
		{
			MethodName: "LinkFolder",
			Handler:    _Filesystem_LinkFolder_Handler,
		},
		{
			MethodName: "CreateFolder",
			Handler:    _Filesystem_CreateFolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/filesystem.proto",
}
